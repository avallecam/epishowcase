---
title: "create_showcase_data"
author: "Karim"
format: html
---

## Run the codes below to familiarise yourself with cleanepi functionalities

### create simulated data

```{r}
# simulated data creation
set.seed(1)
local_data <- simulist::sim_linelist() |>
  simulist::messy_linelist(inconsistent_dates = TRUE)
```

### scan through the data

```{r}
# scanning through the data
scan_result <- cleanepi::scan_data(data = local_data)
print(scan_result)
```

### column names standardisation

```{r}
# DEFAULT COLUMN NAMES STANDARDISATION
cleaned_data <- cleanepi::standardize_column_names(
  data = local_data
)

# KEEP 'date_admission' AS IS, BUT RENAME 'id' AND 'sex' TO
# 'case_id' AND 'gender' RESPECTIVELY
cleaned_data <- cleanepi::standardize_column_names(
  data = local_data,
  keep = "date_admission",
  rename = c(case_id = "id", gender = "sex")
)
print(colnames(cleaned_data))
```

### replace missing values with NA

```{r}
# show the default missing value strings
cleanepi::common_na_strings
```

```{r}
local_data <- cleaned_data
# Replace any default missing value string with NA across all columns
cleaned_data <- cleanepi::replace_missing_values(
  data = local_data,
  target_columns = NULL,
  na_strings = NULL
)
```

### Constant data removal

```{r}
local_data <- cleaned_data
# remove the constant columns, empty rows and columns
cleaned_data <- cleanepi::remove_constants(
  data = local_data,
  cutoff = 1
)
```

### Date standardisation

```{r}
local_data <- cleaned_data
# STANDARDIZE VALUES IN THE 'date_first_pcr_positive_test' COLUMN
cleaned_data <- cleanepi::standardize_dates(
  data = local_data,
  target_columns = c("date_onset", "date_reporting", "date_admission",
                     "date_outcome", "date_first_contact", "date_last_contact"),
  format = NULL,
  timeframe = as.Date(c("2022-12-30", "2023-04-15")),
  error_tolerance = 0.4,
  orders = list(
    world_named_months = c("Ybd", "dby"),
    world_digit_months = c("dmy", "Ymd"),
    US_formats = c("Omdy", "YOmd")
  )
)
```

### Check the sequence of date events

```{r}
local_data <- cleaned_data
cleaned_data <- cleanepi::check_date_sequence(
  data = local_data,
  target_columns = c("date_first_contact", "date_last_contact")
)
```

### Calculate timespan {.scrollable}

```{r}
local_data <- cleaned_data
# DETECT ROWS WITH INCORRECT DATE SEQUENCE
cleaned_data <- cleanepi::timespan(
  data = local_data,
  target_column = "date_first_contact", 
  end_date = "date_last_contact",
  span_column_name = "first_to_last_contact_time",
  span_unit = "months",
  span_remainder_unit = "days"
)
```

### Convert character columns into numeric 

```{r}
# CONVERT THE 'case_id' AND 'age' columns into numeric
local_data <- cleaned_data
cleaned_data <- cleanepi::convert_to_numeric(
  data = local_data,
  target_columns = c("case_id", "age"),
  lang = "en"
)
```

### Dictionary-based data substituting

```{r}
# create the data dictionary
unique_options <- unique(cleaned_data$case_type)
options <- unique_options[!is.na(unique_options)]
values = c("suspected", "confirmed", "probable", "confirmed", "confirmed",
           "probable", "confirmed", "probable", "probable", "probable",
           "probable", "confirmed", "probable", "confirmed", "confirmed",
           "suspected", "probable", "confirmed")
dictionary <- data.frame(
  options = options,
  values = values,
  grp = rep("case_type", length(values)),
  orders = 1:length(values)
)

local_data <- cleaned_data
cleaned_data <- cleanepi::clean_using_dictionary(
  data = local_data,
  dictionary = dictionary
)

unique(cleaned_data$case_type)
```

### Other cleanepi functionalities {.scrollable}

* Create simulated data

```{r}
set.seed(1)
test_data <- simulist::sim_linelist() |>
  simulist::messy_linelist(inconsistent_dates = TRUE)
```

* Scan through the data

```{r}
scan_res <- cleanepi::scan_data(test_data)
```

* Perform several cleaning operations

```{r}
cleaned_data <- test_data |>
  cleanepi::standardize_column_names(
    keep = "date_admission",
    rename = c(case_id = "id", gender = "sex")
  ) |>
  cleanepi::replace_missing_values(
    target_columns = NULL,
    na_strings = NULL
  ) |>
  cleanepi::remove_constants(cutoff = 1.0) |>
  cleanepi::standardize_dates(
    target_columns = c("date_onset", "date_reporting", "date_admission",
                     "date_outcome", "date_first_contact", "date_last_contact"),
    format = NULL,
    timeframe = as.Date(c("2022-12-30", "2023-04-15")),
    error_tolerance = 0.4,
    orders = list(
      world_named_months = c("Ybd", "dby"),
      world_digit_months = c("dmy", "Ymd"),
      US_formats = c("Omdy", "YOmd")
    )
  ) |>
  cleanepi::remove_duplicates(target_columns = NULL) |>
  cleanepi::convert_to_numeric(
    target_columns = c("case_id", "age"),
    lang = "en"
  ) |>
  cleanepi::check_subject_ids(
    target_columns = "case_id",
    prefix = NULL,
    suffix = NULL,
    range = c(1, 100),
    nchar = NULL
  ) |>
  cleanepi::clean_using_dictionary(dictionary = dictionary)
```

* Add the data scanning result to the report

```{r}
cleaned_data <- cleanepi::add_to_report(
   x = cleaned_data,
   key = "scanning_result",
   value = scan_res
)
```

* Print the report

```{r}
cleanepi::print_report(
  data = cleaned_data,
  report_title = "{cleanepi} data cleaning report",
  output_file_name = NULL,
  format = "html",
  print = TRUE
)
```

## Exercises

1. Construct a data dictionary to correct the misspelled options in the `ourcome`
columns. Hint: use the `add_to_dictionary()` function

2. Get individual date of birth from their age. Hint: use the
`convert_numeric_to_date()` function

3. Find the duplicated rows across all columns, then across the columns of type
Date only. Hint: use the `find_duplicates()` and set the value for the
`target_columns` accordingly.

4. Remove the duplicates found from the above. Hint: use the `remove_duplicates()`
function

5. Rerun the cleaning operations above using the `clean_data()` function
